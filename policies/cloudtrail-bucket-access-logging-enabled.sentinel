# This policy requires that resources of type `aws_cloudtrail` have bucket access logging enabled.

# Imports

import "tfconfig/v2" as tfconfig
import "tfresources" as tf
import "report" as report
import "collection" as collection
import "collection/maps" as maps

# Constants

const = {
	"policy_name":                "cloudtrail-bucket-access-logging-enabled",
	"message":                    "Cloudtrail S3 buckets must have access logging enabled. Refer to https://docs.aws.amazon.com/securityhub/latest/userguide/cloudtrail-controls.html#cloudtrail-7 for more details.",
	"resource_aws_cloudtrail":    "aws_cloudtrail",
	"resource_s3_bucket_logging": "aws_s3_bucket_logging",
	"constant_value":             "constant_value",
}

# Functions

# Resolve the bucket name from the bucket expression
# Example bucket expression - bucket_exp = {"references": ["aws_s3_bucket.bucket.id", "aws_s3_bucket.bucket"]}
# Example bucket expression - bucket_exp = {"constant_value": "my-bucket"}
resolve_s3_bucket_name = func(bucket_exp, module_address) {
	if bucket_exp is null {
		return ""
	}
	if maps.get(bucket_exp, const.constant_value, "") is not empty {
		return bucket_exp[const.constant_value]
	} else if maps.get(bucket_exp, "references", []) is not empty {
		# Example References - bucket_exp["references"] = ["aws_s3_bucket.bucket.id", "aws_s3_bucket.bucket"]
		# We get the resource from the address which is the second element in the references array
		if (length(bucket_exp["references"]) < 2) {
			return ""
		}
		if length(maps.get(bucket_exp, "references", [])) > 0 {
			bucket_addr = bucket_exp["references"][1]

			// We don't support variable/locals based references
			if bucket_addr is not defined {
				return ""
			}

			// Prefix the module address with the bucket address
			// to make stuff work for nested modules
			if module_address is not "" {
				bucket_addr = module_address + "." + bucket_addr
			}

			bucket_res = tf.config(tfconfig.resources).address(bucket_addr).resources
			if bucket_res is not empty {
				return maps.get(bucket_res[0], "config.bucket.constant_value", "")
			}
		}
	}
	return ""
}

# Variables

config_resources = tf.config(tfconfig.resources)

cloudtrail_resources = config_resources.type(const.resource_aws_cloudtrail).resources
access_log_enabled_bucket_list = []
aws_s3_bucket_logging_resources = config_resources.type(const.resource_s3_bucket_logging).resources
for aws_s3_bucket_logging_resources as _, res {
	bucket_name = resolve_s3_bucket_name(maps.get(res, "config.bucket", {}), res.module_address)
	if bucket_name is not empty {
		append(access_log_enabled_bucket_list, bucket_name)
	}
}

violations = collection.reject(cloudtrail_resources, func(res) {
	bucket_name = resolve_s3_bucket_name(maps.get(res, "config.s3_bucket_name", {}), res.module_address)
	return bucket_name is empty or bucket_name in access_log_enabled_bucket_list
})

summary = {
	"policy_name": const.policy_name,
	"violations": map violations as _, v {
		{
			"address":        v.address,
			"module_address": v.module_address,
			"message":        const.message,
		}
	},
}

# Outputs

print(report.generate_policy_report(summary))

# Rules

main = rule {
	violations is empty
}
